# -*- coding: utf-8 -*-
"""Proyek-Predictive-Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10AkPEYnxLWIt7XV0yEKAON-fxH4eJ5vs

ðŸ™Œ Tsaqif Mu'tashim Mufid, 2024 ðŸ™Œ

### Import Usefull Library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

import warnings
warnings.filterwarnings('ignore')

"""### A. Data Wrangling

#### Sebelum memulai predictive analysis yang pertama dilakukan adalah memuat data yang sudah kita ambil dari data center UNICEF dengan menggunakan Pandas
"""

data = pd.read_csv('NUTRITION.csv')
data

"""Terlihat diatas datanya masih berantakan sekali namun biarkan sejenak untuk kita coba telusuri kembali informasi apa yang bisa didapat dari sana"""

data.info()

"""Dari data diatas banyak sekali kolom dari tabel, namun di tahap ini kita perlu memasukkan kolom mana saja yang berguna untuk dijadikan feature"""

# Karena datanya banyak maka dari itu kita menggunakan parameter chunksize untuk mempermudah pemrosesan
data = pd.read_csv('NUTRITION.csv', chunksize=11000)

# Setelah data ter-load menggunakan chunksize maka kita langsung define feature mana yang mau kita ambil
all_chunks = []

for chunk in data:
    # Ekstraksi Kolom Yang Dibutuhkan
    col_to_extract = ['REF_AREA:Geographic area',
                      'INDICATOR:Indicator',
                      'SEX:Sex',
                      'AGE:Current age',
                      'WEALTH_QUINTILE:Wealth Quintile',
                      'RESIDENCE:Residence',
                      'MATERNAL_EDU_LVL:Mother\'s Education Level',
                      'TIME_PERIOD:Time period',
                      'OBS_VALUE:Observation Value'
                      ]
    chunk = chunk[col_to_extract]
    # print(chunk)
    # Memberi Perubahan Nama Pada Kolom
    chunk = chunk.rename(columns={
        'REF_AREA:Geographic area': 'Country',
        'INDICATOR:Indicator': 'Indicator',
        'SEX:Sex' : 'Gender',
        'AGE:Current age': 'Age',
        'WEALTH_QUINTILE:Wealth Quintile': 'Poverty_Rating',
        'RESIDENCE:Residence': 'Residence',
        'MATERNAL_EDU_LVL:Mother\'s Education Level': 'Maternal_Education',
        'TIME_PERIOD:Time period': 'Year',
        'OBS_VALUE:Observation Value': 'Observation_Value'
    })
    # print(chunk)

    # Membersihkan values dan menghapus values sebelumnya :
    chunk['Country'] = chunk['Country'].apply(lambda x: x[x.index(':')+1:])
    chunk['Indicator'] = chunk['Indicator'].apply(lambda x: x[x.index(':')+1:])
    chunk['Gender'] = chunk['Gender'].apply(lambda x: x[x.index(':')+1:])
    chunk['Age'] = chunk['Age'].apply(lambda x: x[x.index(':')+1:])
    chunk['Poverty_Rating'] = chunk['Poverty_Rating'].apply(lambda x: x[x.index(':')+1:])
    chunk['Residence'] = chunk['Residence'].apply(lambda x: x[x.index(':')+1:])
    chunk['Maternal_Education'] = chunk['Maternal_Education'].apply(lambda x: x[x.index(':')+1:])


    all_chunks.append(chunk)

# Hasil dari ekstraksi fitur yang terpilih dari data
print(all_chunks)

# Setelah berhasil mendapatkan data, sekarang kita rubah ke Dataframe menggunakan pandas
df = pd.concat(all_chunks)
df

# Konversi Kolom Year kedalam bentuk format datetime
df['Year'] = pd.to_datetime(df['Year'], format='%Y')

# Kita melihat bahwa kolom 'Year' sudah berubah tipedata menjadi Datetime
df.info()

# Mengecek dataframe apakah terdapat duplikasi data
df.duplicated().sum()

# Mengecek dataframe apakah terdapat nilai null
df.isnull().sum()

# Memanggil dataframe dengan parameter .head(). Defaultnya hanya akan memanggil 5 baris data
df.head()

# Mengecek dataframe yang mempunyai tipe data number
df.select_dtypes('number').head()

# Mengecek dataframe yang mempunyai tipe data object
df.select_dtypes('object').head()

# Mengecek Country apa saja yang pada dataset, namun kasus ini sudah terfokuskan ke Indonesia
df['Country'].unique()

# Mengecek Indikator yang diberikan pada dataset
df['Indicator'].unique()

# Dari semua indikator dipilih lah beberapa yang menunjang dengan kasus stunting dan malnutrisi pada anak
indicators_intrst = ['Ever breastfed (0-23 months)',
                     'Continued breastfeeding (12-15 months)',
                     'Continued breastfeeding (12-23 months)',
                     'Continued breastfeeding (20-23 months)',
                     'Height-for-age <-2 SD (stunting)',
                     'Introduction to solid, semi-solid foods (6-8 months)',
                     'Mean BMI-for-age',
                     'Minimum meal frequency (children aged 6 to 23 months)',
                     'Weight-for-age <-2 SD (Underweight)',
                     'Weight-for-height <-2 SD (wasting)',
                     'Weight-for-height <-3 SD (severe wasting)',
                     'Weight-for-height >+2 SD (overweight)',
                     'Vitamin A Supplementation, two-dose coverage'
                     'Prevalence of low birth weight among new-borns'
                     ]

# Menghapus whitespace pada kolom 'Country' dan 'Indicator' karena masih berbentuk raw data
df['Country'] = df['Country'].str.strip()
df['Indicator'] = df['Indicator'].str.strip()

# Filter Indicator yang dipilih sehingga nantinya kita gabungkan kembali dengan 'Indonesia'
mask = df['Indicator'].isin(indicators_intrst)
ind_df = df[mask]

mask = ind_df['Country'].str.contains('Indonesia')
nutri_indo = ind_df[mask]

# Mengecek dataframe baru
nutri_indo

nutri_indo.shape

nutri_indo['Residence'].unique()

nutri_indo['Residence'] = nutri_indo['Residence'].str.strip().replace('Total', 'Suburban')
nutri_indo['Residence'].unique()

nutri_indo['Maternal_Education'].value_counts()

nutri_indo['Maternal_Education'].unique()

nutri_indo['Maternal_Education'] = nutri_indo['Maternal_Education'].str.strip().replace('None and Primary', 'Primary education')
nutri_indo['Maternal_Education'] = nutri_indo['Maternal_Education'].str.strip().replace('Secondary and Higher','Secondary education')
nutri_indo['Maternal_Education'] = nutri_indo['Maternal_Education'].str.strip().replace('Secondary education (lower and upper secondary education)', 'Secondary education')
nutri_indo['Maternal_Education'] = nutri_indo['Maternal_Education'].str.strip().replace('Never attended an education programme / No schooling','No education')
nutri_indo['Maternal_Education'] = nutri_indo['Maternal_Education'].str.strip().replace('Total', 'No education')

nutri_indo['Maternal_Education'].value_counts()

# Check unique categories in the 'Poverty_Rating' column
nutri_indo['Poverty_Rating'].unique()

nutri_indo['Poverty_Rating'] = nutri_indo['Poverty_Rating'].str.strip().replace('Total', 'Poor')
nutri_indo['Poverty_Rating'] = nutri_indo['Poverty_Rating'].str.strip().replace('Lowest', 'Poor')
nutri_indo['Poverty_Rating'] = nutri_indo['Poverty_Rating'].str.strip().replace('Second', 'Poor')
nutri_indo['Poverty_Rating'] = nutri_indo['Poverty_Rating'].str.strip().replace('Bottom 20%', 'Poor')
nutri_indo['Poverty_Rating'] = nutri_indo['Poverty_Rating'].str.strip().replace('Bottom 40%', 'Poor')
nutri_indo['Poverty_Rating'] = nutri_indo['Poverty_Rating'].str.strip().replace('Bottom 60%', 'Middle Class')
nutri_indo['Poverty_Rating'] = nutri_indo['Poverty_Rating'].str.strip().replace('Bottom 80%', 'Middle Class')
nutri_indo['Poverty_Rating'] = nutri_indo['Poverty_Rating'].str.strip().replace('Middle', 'Middle Class')
nutri_indo['Poverty_Rating'] = nutri_indo['Poverty_Rating'].str.strip().replace('Fourth', 'Middle Class')
nutri_indo['Poverty_Rating'] = nutri_indo['Poverty_Rating'].str.strip().replace('Highest', 'Rich')
nutri_indo['Poverty_Rating'] = nutri_indo['Poverty_Rating'].str.strip().replace('Richest 20%', 'Rich')
nutri_indo['Poverty_Rating'] = nutri_indo['Poverty_Rating'].str.strip().replace('Richest 40%', 'Rich')
nutri_indo['Poverty_Rating'] = nutri_indo['Poverty_Rating'].str.strip().replace('Richest 60%', 'Rich')
nutri_indo['Poverty_Rating'] = nutri_indo['Poverty_Rating'].str.strip().replace('Richest 80%', 'Rich')

nutri_indo['Poverty_Rating'].value_counts()

nutri_indo['Gender'].value_counts()

nutri_indo.info()

nutri_indo.to_csv('Nutrition_Indonesia.csv', index=False)

"""### B. Exploratory Data Analysis and Vizualizations
Di section ini kita akan melakukan data analisis terhadap dataset yang sudah dibuat meliputi Univariate, Bivariate dan Multivariate.

#### Univariate Analysis

##### 1. Univariate Analysis Terhadap Data Numberic Variable 'Observation_Value'
"""

nutri_indo.describe().T

# Build diskplot and boxplot check how distribution of "Observation_Value" looks like with matplotlib
plt.figure(figsize=[16, 5])
plt.subplot(121)
sns.distplot(nutri_indo["Observation_Value"])
plt.subplot(122)
nutri_indo["Observation_Value"].plot.box(figsize=(16, 5))
plt.show()

"""Observasi

- Hasil yang didapat dari visual data terhadap variabel target 'Observation_Value' tidak terdistribusi secara normal bisa terlihat pada 'Density' yang sangat condong ke kanan (Right-Skewed or Positive-Skewed)
- Selanjutnya, data yang sudah di plotting menggunakan boxplot terlihat tidak ada outliers yang menandakan kita tidak memerlukan perlakuan khusus untuk mentiadakan outliers pada data kita

##### 2. Univariate Analysis Terhadap Data Categorical Variable 'Residence'
"""

nutri_indo['Residence'].value_counts()

# Visualizing the number of different types of Residence
nutri_indo["Residence"].value_counts().plot(kind="bar", xlabel="Residence", ylabel="Frequency", title = "Count of Residence");

"""Observasi
- Sebagian Besar Penduduk Indonesia Bertempat Tinggal Di Wilayah Pinggiran (Suburban)

##### 3. Univariate Analysis Terhadap Data Categorical Variable 'Poverty_Rating'
"""

nutri_indo['Poverty_Rating'].value_counts()

nutri_indo["Poverty_Rating"].value_counts().plot(kind="bar", xlabel="Poverty_Rating", ylabel="Frequency", title="Count of Poverty Rating")

"""Observasi
- Menurut data yang sudah di visual, Sebagian Besar Masyarakat Indonesia Berasal Dari Keluarga Berekonomi Rendah

##### 4. Univariate Analysis Terhadap Data Categorical Variable 'Maternal_Education'
"""

nutri_indo['Maternal_Education'].value_counts()

nutri_indo['Maternal_Education'].value_counts().plot(kind='bar', xlabel='Maternal Education', ylabel='Frequency', title='Count of Maternal Education')

"""Observasi
- Sebagian Besar Warga Indonesia Tidak Berlatar Pendidikan Yang Baik

#### Bivariate Analysis

##### 1. Bivariate Analysis of Categorical Variable Maternal_Education and Categorical Variable Indicator
"""

nutri_indo['Maternal_Education'].value_counts()

education_indo = nutri_indo.pivot_table(index='Maternal_Education', columns='Indicator', values='Observation_Value', aggfunc=np.mean,  fill_value=0)

education_indo.rename(columns={'Ever breastfed (0-23 months)': 'Breastfed (0-23 months)'}, inplace='True')
education_indo.rename(columns={'Continued breastfeeding (12-15 months)': 'Breastfed (12-15 months)'}, inplace='True')
education_indo.rename(columns={'Continued breastfeeding (12-23 months)': 'Breastfed (12-23 months)'}, inplace='True')
education_indo.rename(columns={'Continued breastfeeding (20-23 months)': 'Breastfed (20-23 months)'}, inplace='True')
education_indo.rename(columns={'Introduction to solid, semi-solid foods (6-8 months)': 'Solid_Food'}, inplace='True')
education_indo.rename(columns={'Mean BMI-for-age': 'BMI_age'}, inplace='True')
education_indo.rename(columns={'Minimum meal frequency (children aged 6 to 23 months)':'Meal_Frequency'}, inplace= 'True')
education_indo.rename(columns={'Height-for-age <-2 SD (stunting)':'Stunting'}, inplace='True')
education_indo.rename(columns={'Weight-for-age <-2 SD (Underweight)': 'Underweight'}, inplace='True')
education_indo.rename(columns={'Weight-for-height <-2 SD (wasting)': 'Wasting'}, inplace='True')
education_indo.rename(columns={'Weight-for-height <-3 SD (severe wasting)': 'Severe_Wasting'}, inplace='True')
education_indo.rename(columns={'Weight-for-height >+2 SD (overweight)': 'Overweight'}, inplace='True')

education_indo.head()

"""Observasi
- Didapatkan data kasus stunting lebih dominan kepada mayoritas yang tidak mempunyai pendidikan.
- Selain itu, indikator lainnya seperti Underweight juga lebih dominan terhadap kategori yang tidak mempunyai latar pendidikan.
- Indikator Overweight pun berhubungan terhadap kategori yang tidak mempunyai latar pendidian.
"""

# Plot heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(education_indo.corr(), annot=True,)

"""Observasi
- Berdasarkan heatmap sendiri, korelasi paling tinggi terhadap kasus stunting tentu indikator Underweight, Wasting, Severve_Wasting, Overweight.
- Selain itu Breastfed (12 - 15 Month) mempunyai korelasi yang cukup signifikan yaitu 0.24 untuk kasus stunting di ikuti oleh indikator Breastfed dalam jenjang waktu yang berbeda yakni 0.19 dan 0.18.
- Berdasarkan heatmap tersebut kategori pendidikan juga turut serta bepengaruh terhadap ASI yang diberikan oleh batita hal ini bisa dilihat pada indikator BMI_Age Breastfed (0 - 23 Month ) sebesar 0.49.
"""

education_indo.plot(kind='bar', rot=0)
plt.gcf().set_size_inches(20, 5)

"""Observasi
- Dari plot bar juga dapat diketahui bahwa Stunting terjadi biasanya pada kategori yang tidak mendapatkan pendidikan.
"""

# grouping maternal education and breastfeeding

meb = education_indo.groupby('Maternal_Education')[[
    'Breastfed (0-23 months)', 'Breastfed (12-15 months)', 'Breastfed (12-23 months)', 'Breastfed (20-23 months)']].mean().reset_index()
meb

"""Observasi
- Kita sepakat bahwa pengadaan ASI yang cukup telah dilakukan di segala sektor pendidikan khususnya minimal pada Primary Education. Selanjutnya diberikan asupan ASI mulai berkurang pada rentang jangka waktu tertentu dalam jenjang pendidikan yang lebih tinggi.
"""

# Create a donut chart 'Breastfed (12-15 months)', 'Breastfed (12-23 months)', 'Breastfed (20-23 months)'
plt.pie(meb['Breastfed (0-23 months)'], labels=meb['Maternal_Education'],
        autopct='%1.1f%%', startangle=90, wedgeprops=dict(width=0.6))

# Draw a circle in the center to create the donut effect
centre_circle = plt.Circle((0, 0), 0.25, fc='white')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)

# Equal aspect ratio ensures that pie is drawn as a circle
plt.tight_layout()
plt.title('Maternal education and Breastfeeding', fontsize=20)
plt.savefig('MateduBreastfeed', bbox_inches='tight', dpi=300)

# Create a donut chart 'Breastfed (12-23 months)', 'Breastfed (20-23 months)'
plt.pie(meb['Breastfed (12-15 months)'], labels=meb['Maternal_Education'],
        autopct='%1.1f%%', startangle=90, wedgeprops=dict(width=0.6))

# Draw a circle in the center to create the donut effect
centre_circle = plt.Circle((0, 0), 0.25, fc='white')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)

# Equal aspect ratio ensures that pie is drawn as a circle
plt.tight_layout()
plt.title('Maternal education and Breastfeeding', fontsize=20)
plt.savefig('MateduBreastfeed', bbox_inches='tight', dpi=300)

# Create a donut chart'Breastfed (20-23 months)'
plt.pie(meb['Breastfed (12-23 months)'], labels=meb['Maternal_Education'],
        autopct='%1.1f%%', startangle=90, wedgeprops=dict(width=0.6))

# Draw a circle in the center to create the donut effect
centre_circle = plt.Circle((0, 0), 0.25, fc='white')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)

# Equal aspect ratio ensures that pie is drawn as a circle
plt.tight_layout()
plt.title('Maternal education and Breastfeeding', fontsize=20)
plt.savefig('MateduBreastfeed', bbox_inches='tight', dpi=300)

# Create a donut chart
plt.pie(meb['Breastfed (20-23 months)'], labels=meb['Maternal_Education'],
        autopct='%1.1f%%', startangle=90, wedgeprops=dict(width=0.6))

# Draw a circle in the center to create the donut effect
centre_circle = plt.Circle((0, 0), 0.25, fc='white')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)

# Equal aspect ratio ensures that pie is drawn as a circle
plt.tight_layout()
plt.title('Maternal education and Breastfeeding', fontsize=20)
plt.savefig('MateduBreastfeed', bbox_inches='tight', dpi=300)

# Grouping maternal education and severe wasting

mebsw = education_indo.groupby('Maternal_Education')[
    'Severe_Wasting'].mean().reset_index()
mebsw

# Grouping maternal education and underweight

mebuw = education_indo.groupby('Maternal_Education')[
    'Underweight'].mean().reset_index()
mebuw

"""##### 2. Bivariate Analysis of Categorical Variable Poverty_Ratings and Categorical Variable Indicator"""

nutri_indo['Poverty_Rating'].value_counts()

poverty_indo = nutri_indo.pivot_table(index='Poverty_Rating', columns='Indicator', values='Observation_Value', aggfunc=np.mean,  fill_value=0)

poverty_indo.rename(columns={'Ever breastfed (0-23 months)': 'Breastfed (0-23 months)'}, inplace='True')
poverty_indo.rename(columns={'Continued breastfeeding (12-15 months)': 'Breastfed (12-15 months)'}, inplace='True')
poverty_indo.rename(columns={'Continued breastfeeding (12-23 months)': 'Breastfed (12-23 months)'}, inplace='True')
poverty_indo.rename(columns={'Continued breastfeeding (20-23 months)': 'Breastfed (20-23 months)'}, inplace='True')
poverty_indo.rename(columns={'Introduction to solid, semi-solid foods (6-8 months)': 'Solid_Food'}, inplace='True')
poverty_indo.rename(columns={'Mean BMI-for-age': 'BMI_age'}, inplace='True')
poverty_indo.rename(columns={'Minimum meal frequency (children aged 6 to 23 months)': 'Meal_Frequency'}, inplace='True')
poverty_indo.rename(columns={'Height-for-age <-2 SD (stunting)': 'Stunting'}, inplace='True')
poverty_indo.rename(columns={'Weight-for-age <-2 SD (Underweight)': 'Underweight'}, inplace='True')
poverty_indo.rename(columns={'Weight-for-height <-2 SD (wasting)': 'Wasting'}, inplace='True')
poverty_indo.rename(columns={'Weight-for-height <-3 SD (severe wasting)': 'Severe_Wasting'}, inplace='True')
poverty_indo.rename(columns={'Weight-for-height >+2 SD (overweight)': 'Overweight'}, inplace='True')

poverty_indo.head()

"""Observasi
- Disamping pendidikan, kategori kekayaan juga dieksplor lebih mendalam. Didapatkan data akhir bahwa kasus stunting terjadi kepada masyarakat mayoritas yang memiliki kekayaan rendah.
- Kekayaan rendah juga mempunyai beberapa korelasi yang berhubungan dengan Underweight, Wasting, Severe_Wasting, dan juga Overweight.
"""

sns.heatmap(poverty_indo.corr(), annot=True)

poverty_indo.plot(kind='bar', rot=0)
plt.gcf().set_size_inches(20, 5)

"""Observasi
- Pada diagram plot bar sendiri terlihat bahwa kasus stunting dimiliki oleh masyarakat yang mempunyai kekayaan rendah.

##### 3. Bivariate Analysis of Categorical Variable Year and Categorical Variable Indicator
"""

year_indo = nutri_indo.pivot_table(index='Year', columns='Indicator', values='Observation_Value', aggfunc=np.mean,  fill_value=0)

year_indo.rename(columns={'Ever breastfed (0-23 months)': 'Breastfed (0-23 months)'}, inplace='True')
year_indo.rename(columns={'Continued breastfeeding (12-15 months)': 'Breastfed (12-15 months)'}, inplace='True')
year_indo.rename(columns={'Continued breastfeeding (12-23 months)': 'Breastfed (12-23 months)'}, inplace='True')
year_indo.rename(columns={'Continued breastfeeding (20-23 months)': 'Breastfed (20-23 months)'}, inplace='True')
year_indo.rename(columns={'Introduction to solid, semi-solid foods (6-8 months)': 'Solid_Food'}, inplace='True')
year_indo.rename(columns={'Mean BMI-for-age': 'BMI_age'}, inplace='True')
year_indo.rename(columns={'Minimum meal frequency (children aged 6 to 23 months)': 'Meal_Frequency'}, inplace='True')
year_indo.rename(columns={'Height-for-age <-2 SD (stunting)': 'Stunting'}, inplace='True')
year_indo.rename(columns={'Weight-for-age <-2 SD (Underweight)': 'Underweight'}, inplace='True')
year_indo.rename(columns={'Weight-for-height <-2 SD (wasting)': 'Wasting'}, inplace='True')
year_indo.rename(columns={'Weight-for-height <-3 SD (severe wasting)': 'Severe_Wasting'}, inplace='True')
year_indo.rename(columns={'Weight-for-height >+2 SD (overweight)': 'Overweight'}, inplace='True')

year_indo.reset_index()

year_indo.corr()

sns.heatmap(year_indo.corr(), annot=True)
plt.show()

"""#### Multivariate Analysis"""

country_years_indo = nutri_indo.pivot_table(index=['Country', 'Year'], columns='Indicator', values='Observation_Value', aggfunc=np.mean,  fill_value=0)

country_years_indo.rename(columns={'Ever breastfed (0-23 months)': 'Breastfed (0-23 months)'}, inplace='True')
country_years_indo.rename(columns={'Continued breastfeeding (12-15 months)': 'Breastfed (12-15 months)'}, inplace='True')
country_years_indo.rename(columns={'Continued breastfeeding (12-23 months)': 'Breastfed (12-23 months)'}, inplace='True')
country_years_indo.rename(columns={'Continued breastfeeding (20-23 months)': 'Breastfed (20-23 months)'}, inplace='True')
country_years_indo.rename(columns={'Introduction to solid, semi-solid foods (6-8 months)': 'Solid_Food'}, inplace='True')
country_years_indo.rename(columns={'Mean BMI-for-age': 'BMI_age'}, inplace='True')
country_years_indo.rename(columns={'Minimum meal frequency (children aged 6 to 23 months)': 'Meal_Frequency'}, inplace='True')
country_years_indo.rename(columns={'Height-for-age <-2 SD (stunting)': 'Stunting'}, inplace='True')
country_years_indo.rename(columns={'Weight-for-age <-2 SD (Underweight)': 'Underweight'}, inplace='True')
country_years_indo.rename(columns={'Weight-for-height <-2 SD (wasting)': 'Wasting'}, inplace='True')
country_years_indo.rename(columns={'Weight-for-height <-3 SD (severe wasting)': 'Severe_Wasting'}, inplace='True')
country_years_indo.rename(columns={'Weight-for-height >+2 SD (overweight)': 'Overweight'}, inplace='True')

# reset index
country_years_indo.reset_index()

country_years_indo.head()

# stunting by country over years
sry = country_years_indo.groupby(['Country', 'Year'])['Stunting'].mean().reset_index()
sry

# Function to plot indicators by region over different variables
def plot_year_region_trend(data, indicator):
  plt.figure(figsize=(11, 7))

  # Get unique regions
  reg = data['Country'].unique()

  # Create subplots
  for i, region in enumerate(reg, start=1):
      plt.subplot(len(reg), 1, i)

      # Filter the DataFrame for the current region
      data_for_region = data[data['Country'] == region]

      # Plot the line for the current region
      sns.lineplot(data=data_for_region, x='Year',
                   y=indicator, marker='o', ci=None)
      plt.savefig('Year{}'.format(indicator), bbox_inches='tight', dpi=300)
      plt.title(region)  # Set the title as the region name

  # Adjust layout
  plt.tight_layout()

  plt.show()

plot_year_region_trend(sry, 'Stunting')

"""Observasi
- Trend dari tahun ke tahun Indonesia masih termasuk kategori yang cukup tinggi untuk kasus Stunting
"""

ury = country_years_indo.groupby(['Country', 'Year'])['Underweight'].mean().reset_index()
plot_year_region_trend(ury, 'Underweight')

ory = country_years_indo.groupby(['Country', 'Year'])['Overweight'].mean().reset_index()
plot_year_region_trend(ory, 'Overweight')

wry = country_years_indo.groupby(['Country', 'Year'])['Wasting'].mean().reset_index()
plot_year_region_trend(wry, 'Wasting')

"""### C. Data Preparing
Di section ini kita akan melakukan data preparing agar bisa di modelkan dengan machine learning dengan pembagian data menjadi data train dan data test menggunakan library train_test_split dengan rasio 80:20.

#### A. Data Pre-Processing
"""

import numpy as np
from sklearn.preprocessing import LabelEncoder

# Convert Feature Maternal Education
LE = LabelEncoder()
nutri_indo['Maternal_Education'] = LE.fit_transform(nutri_indo['Maternal_Education'])
print(LE.classes_)
print(np.sort(nutri_indo['Maternal_Education'].unique()))
print(' ')

# Convert Feature Indicator
LE = LabelEncoder()
nutri_indo['Indicator'] = LE.fit_transform(nutri_indo['Indicator'])
print(LE.classes_)
print(np.sort(nutri_indo['Indicator'].unique()))
print(' ')

# Convert Feature Poverty_Rating
LE = LabelEncoder()
nutri_indo['Poverty_Rating'] = LE.fit_transform(nutri_indo['Poverty_Rating'])
print(LE.classes_)
print(np.sort(nutri_indo['Poverty_Rating'].unique()))
print(' ')

# Convert Feature Residence
LE = LabelEncoder()
nutri_indo['Residence'] = LE.fit_transform(nutri_indo['Residence'])
print(LE.classes_)
print(np.sort(nutri_indo['Residence'].unique()))
print(' ')

# Convert Feature Gender
LE = LabelEncoder()
nutri_indo['Gender'] = LE.fit_transform(nutri_indo['Gender'])
print(LE.classes_)
print(np.sort(nutri_indo['Gender'].unique()))
print(' ')

# Convert Feature Country
LE = LabelEncoder()
nutri_indo['Country'] = LE.fit_transform(nutri_indo['Country'])
print(LE.classes_)
print(np.sort(nutri_indo['Country'].unique()))
print(' ')

# Convert Feature Age
LE = LabelEncoder()
nutri_indo['Age'] = LE.fit_transform(nutri_indo['Age'])
print(LE.classes_)
print(np.sort(nutri_indo['Age'].unique()))
print(' ')

# Convert Feature Age
LE = LabelEncoder()
nutri_indo['Age'] = LE.fit_transform(nutri_indo['Age'])
print(LE.classes_)
print(np.sort(nutri_indo['Age'].unique()))
print(' ')

# Convert Feature Age
LE = LabelEncoder()
nutri_indo['Year'] = LE.fit_transform(nutri_indo['Year'])
print(LE.classes_)
print(np.sort(nutri_indo['Year'].unique()))
print(' ')

nutri_indo.head()

nutri_indo.shape

X = nutri_indo[['Indicator', 'Residence',
                'Poverty_Rating', 'Maternal_Education', 'Age', 'Gender']]
y = nutri_indo['Observation_Value']

# Feature Selection
from sklearn import feature_selection
from sklearn.feature_selection import SelectKBest, f_regression
selector = SelectKBest(f_regression, k=7)
fit = selector.fit_transform(X, y)
# New dataframe with the selected features for later use in the classifier. fit() method works too, if you want only the feature names and their corresponding scores
X_new = selector.fit_transform(X, y)
names = X.columns.values[selector.get_support()]
scores = selector.scores_[selector.get_support()]
names_scores = list(zip(names, scores))
ns_df = pd.DataFrame(data=names_scores, columns=['Feat_names', 'F_Scores'])
# Sort the dataframe for better visualization
ns_df_sorted = ns_df.sort_values(
    ['F_Scores', 'Feat_names'], ascending=[False, True])
print(ns_df_sorted)

import pandas as pd
from matplotlib import pyplot as plt


feature = list(ns_df_sorted['Feat_names'].values)
score = list(ns_df_sorted['F_Scores'].values)

# Figure Size
fig, ax = plt.subplots(figsize=(16, 9))

# Horizontal Bar Plot
ax.barh(feature, score)

# Remove axes splines
for s in ['top', 'bottom', 'left', 'right']:
	ax.spines[s].set_visible(False)

# Remove x, y Ticks
ax.xaxis.set_ticks_position('none')
ax.yaxis.set_ticks_position('none')

# Add padding between axes and labels
ax.xaxis.set_tick_params(pad=5)
ax.yaxis.set_tick_params(pad=10)


# Show top values
ax.invert_yaxis()

# Add annotation to bars
for i in ax.patches:
	plt.text(i.get_width()+0.2, i.get_y()+0.5,
          str(round((i.get_width()), 2)),
            fontsize=10, fontweight='bold',
            color='grey')

# Add Plot Title
ax.set_title('Feature Importance',
             loc='left', )

# Add Text watermark
fig.text(0.9, 0.15, 'ModelCraft', fontsize=12,
         color='grey', ha='right', va='bottom',
         alpha=0.7)

# Show Plot
plt.show()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

from sklearn.preprocessing import StandardScaler

numerical_features = ['Indicator', 'Residence',
                      'Poverty_Rating', 'Maternal_Education', 'Age', 'Gender']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(
    X_train.loc[:, numerical_features])
X_train[numerical_features].head()

"""#### B. Data Modeling"""

nutrisi_indonesia = nutri_indo.copy()

# Convert Feature Maternal Education
LE = LabelEncoder()
nutrisi_indonesia['Maternal_Education'] = LE.fit_transform(
    nutrisi_indonesia['Maternal_Education'])
print(LE.classes_)
print(np.sort(nutrisi_indonesia['Maternal_Education'].unique()))
print(' ')

# Convert Feature Indicator
LE = LabelEncoder()
nutrisi_indonesia['Indicator'] = LE.fit_transform(
    nutrisi_indonesia['Indicator'])
print(LE.classes_)
print(np.sort(nutrisi_indonesia['Indicator'].unique()))
print(' ')

# Convert Feature Poverty_Rating
LE = LabelEncoder()
nutrisi_indonesia['Poverty_Rating'] = LE.fit_transform(
    nutrisi_indonesia['Poverty_Rating'])
print(LE.classes_)
print(np.sort(nutrisi_indonesia['Poverty_Rating'].unique()))
print(' ')

# Convert Feature Residence
LE = LabelEncoder()
nutrisi_indonesia['Residence'] = LE.fit_transform(
    nutrisi_indonesia['Residence'])
print(LE.classes_)
print(np.sort(nutrisi_indonesia['Residence'].unique()))
print(' ')

# Convert Feature Gender
LE = LabelEncoder()
nutrisi_indonesia['Gender'] = LE.fit_transform(nutrisi_indonesia['Gender'])
print(LE.classes_)
print(np.sort(nutrisi_indonesia['Gender'].unique()))
print(' ')

# Convert Feature Country
LE = LabelEncoder()
nutrisi_indonesia['Country'] = LE.fit_transform(nutrisi_indonesia['Country'])
print(LE.classes_)
print(np.sort(nutrisi_indonesia['Country'].unique()))
print(' ')

# Convert Feature Age
LE = LabelEncoder()
nutrisi_indonesia['Age'] = LE.fit_transform(nutrisi_indonesia['Age'])
print(LE.classes_)
print(np.sort(nutrisi_indonesia['Age'].unique()))
print(' ')

# Convert Feature Age
LE = LabelEncoder()
nutrisi_indonesia['Age'] = LE.fit_transform(nutrisi_indonesia['Age'])
print(LE.classes_)
print(np.sort(nutrisi_indonesia['Age'].unique()))
print(' ')

# Convert Feature Age
LE = LabelEncoder()
nutrisi_indonesia['Year'] = LE.fit_transform(nutrisi_indonesia['Year'])
print(LE.classes_)
print(np.sort(nutrisi_indonesia['Year'].unique()))
print(' ')

from sklearn.model_selection import train_test_split

Feature = nutri_indo[['Indicator', 'Residence',
                'Poverty_Rating', 'Maternal_Education', 'Age', 'Gender']]
Target = nutri_indo['Observation_Value']
X_train, X_test, y_train, y_test = train_test_split(
    Feature, Target, test_size=0.2, random_state=2)

from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Linear Regression
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)
linear_predictions = linear_model.predict(X_test)

# Decision Tree Regression
tree_model = DecisionTreeRegressor()
tree_model.fit(X_train, y_train)
tree_predictions = tree_model.predict(X_test)

# Random Forest Regression
forest_model = RandomForestRegressor()
forest_model.fit(X_train, y_train)
forest_predictions = forest_model.predict(X_test)

# Support Vector Regression
svr_model = SVR()
svr_model.fit(X_train, y_train)
svr_predictions = svr_model.predict(X_test)

# Gradient Boosting Regression
gb_model = GradientBoostingRegressor()
gb_model.fit(X_train, y_train)
gb_predictions = gb_model.predict(X_test)

"""#### C. Evaluasi Model"""

# Evaluation Metrics
linear_mae = mean_absolute_error(y_test, linear_predictions)
tree_mae = mean_absolute_error(y_test, tree_predictions)
forest_mae = mean_absolute_error(y_test, forest_predictions)
svr_mae = mean_absolute_error(y_test, svr_predictions)
gb_mae = mean_absolute_error(y_test, gb_predictions)

linear_mse = mean_squared_error(y_test, linear_predictions)
tree_mse = mean_squared_error(y_test, tree_predictions)
forest_mse = mean_squared_error(y_test, forest_predictions)
svr_mse = mean_squared_error(y_test, svr_predictions)
gb_mse = mean_squared_error(y_test, gb_predictions)

print("Mean Absolute Error:")
print(f"Linear Regression: {linear_mae}")
print(f"Decision Tree Regression: {tree_mae}")
print(f"Random Forest Regression: {forest_mae}")
print(f"Support Vector Regression: {svr_mae}")
print(f"Gradient Boosting Regression: {gb_mae}")

print("\nMean Squared Error:")
print(f"Linear Regression: {linear_mse}")
print(f"Decision Tree Regression: {tree_mse}")
print(f"Random Forest Regression: {forest_mse}")
print(f"Support Vector Regression: {svr_mse}")
print(f"Gradient Boosting Regression: {gb_mse}")

from sklearn.metrics import r2_score

# R-squared (coefficient of determination) evaluation
linear_r2 = r2_score(y_test, linear_predictions)
tree_r2 = r2_score(y_test, tree_predictions)
forest_r2 = r2_score(y_test, forest_predictions)
svr_r2 = r2_score(y_test, svr_predictions)
gb_r2 = r2_score(y_test, gb_predictions)

print("R-squared (Coefficient of Determination):")
print(f"Linear Regression: {linear_r2}")
print(f"Decision Tree Regression: {tree_r2}")
print(f"Random Forest Regression: {forest_r2}")
print(f"Support Vector Regression: {svr_r2}")
print(f"Gradient Boosting Regression: {gb_r2}")

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Create subplots
fig, axes = plt.subplots(2, 3, figsize=(15, 10))
fig.suptitle('Regression Model Predictions vs Actual Values', fontsize=16)

# Linear Regression
axes[0, 0].scatter(y_test, linear_predictions,
                   color='blue', label='Linear Regression')
axes[0, 0].plot([min(y_test), max(y_test)], [min(y_test), max(
    y_test)], linestyle='--', color='red', label='Perfect Prediction')
axes[0, 0].set_title('Linear Regression')
axes[0, 0].set_xlabel('Actual Values')
axes[0, 0].set_ylabel('Predicted Values')

# Decision Tree Regression
axes[0, 1].scatter(y_test, tree_predictions, color='green',
                   label='Decision Tree Regression')
axes[0, 1].plot([min(y_test), max(y_test)], [min(y_test), max(
    y_test)], linestyle='--', color='red', label='Perfect Prediction')
axes[0, 1].set_title('Decision Tree Regression')
axes[0, 1].set_xlabel('Actual Values')
axes[0, 1].set_ylabel('Predicted Values')

# Random Forest Regression
axes[0, 2].scatter(y_test, forest_predictions, color='orange',
                   label='Random Forest Regression')
axes[0, 2].plot([min(y_test), max(y_test)], [min(y_test), max(
    y_test)], linestyle='--', color='red', label='Perfect Prediction')
axes[0, 2].set_title('Random Forest Regression')
axes[0, 2].set_xlabel('Actual Values')
axes[0, 2].set_ylabel('Predicted Values')

# Support Vector Regression
axes[1, 0].scatter(y_test, svr_predictions, color='purple',
                   label='Support Vector Regression')
axes[1, 0].plot([min(y_test), max(y_test)], [min(y_test), max(
    y_test)], linestyle='--', color='red', label='Perfect Prediction')
axes[1, 0].set_title('Support Vector Regression')
axes[1, 0].set_xlabel('Actual Values')
axes[1, 0].set_ylabel('Predicted Values')

# Gradient Boosting Regression
axes[1, 1].scatter(y_test, gb_predictions, color='brown',
                   label='Gradient Boosting Regression')
axes[1, 1].plot([min(y_test), max(y_test)], [min(y_test), max(
    y_test)], linestyle='--', color='red', label='Perfect Prediction')
axes[1, 1].set_title('Gradient Boosting Regression')
axes[1, 1].set_xlabel('Actual Values')
axes[1, 1].set_ylabel('Predicted Values')

# Remove empty subplot
fig.delaxes(axes[1, 2])

# Adjust layout
plt.tight_layout(rect=[0, 0, 1, 0.96])
plt.show()